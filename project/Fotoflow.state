# FotoFlow Product Architecture Document

## 1. Product Overview
FotoFlow is a comprehensive web application designed for managing and sharing photo projects. It provides a platform for users to upload, organize, and share their photographic work, leveraging Firebase for robust backend services including user authentication, data storage (Firestore), and file storage (Cloud Storage). The frontend is built using React.js, with Redux Toolkit handling efficient state management.

## 2. Architectural Overview
The application employs a client-server architecture where the React-based frontend interacts directly with various Firebase services. This setup allows for a scalable and secure environment for photo management. Redux is central to the frontend, ensuring predictable state management across the application.

## 3. Technology Stack

*   **Frontend**: React.js
*   **State Management**: Redux Toolkit
*   **Styling**: Sass, Tailwind CSS (with `tailwind-merge`, `tailwindcss-animate`)
*   **Backend/Database**: Firebase (Firestore, Cloud Storage, Authentication)
*   **EXIF Data Handling**: `exifreader`
*   **Image Compression**: `browser-image-compression`
*   **Routing**: `react-router-dom`
*   **UI Components**: Material-UI (`@mui/material`), Radix UI (`@radix-ui/react-dropdown-menu`), `sonner` (for toasts)

## 4. Core Components (High-Level)

*   **`src/app/`**: Contains the Redux store configuration and various Redux slices that manage application-wide state.
*   **`src/components/`**: Houses a collection of reusable React components that are utilized across different features of the application.
*   **`src/features/`**: Organizes feature-specific components and their associated logic, promoting modularity and maintainability.
*   **`src/firebase/`**: Manages Firebase initialization and provides functions for interacting with Firestore and Cloud Storage.
*   **`src/hooks/`**: Stores custom React hooks, encapsulating reusable stateful logic.
*   **`src/utils/`**: A collection of utility functions for common tasks such as file handling, authentication, and string manipulation.

## 5. Data Model (High-Level)
Data persistence is primarily handled by Firebase Firestore for structured data and Firebase Cloud Storage for media files. Key entities in the data model likely include:

*   **Users**: User profiles and authentication information.
*   **Projects**: Represents photo projects, containing metadata and references to associated photos.
*   **Photos**: Individual photo entries, including metadata, storage references, and potentially EXIF data.
*   **Teams**: (If applicable) Structures for collaborative project management.

## 6. Deployment and Infrastructure
FotoFlow is deployed using Firebase, which provides hosting for the frontend application and manages all backend services (Firestore, Cloud Storage, Authentication, Cloud Functions). This integrated platform simplifies deployment and scales automatically.

